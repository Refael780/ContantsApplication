{"ast":null,"code":"import { GET_CONTACT, GET_ALL_CONTACT, REMOVE_CONTACT, FILLTER_CONTACT, SET_CONTACT, SET_CONTACT_ERROR, GET_ALL_CONTACT_ERROR } from '../action/type';\nconst initialState = {\n  contact: null,\n  suggestContacts: [],\n  contacts: [],\n  loading: true,\n  error: {}\n};\nexport default ((state = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_CONTACT:\n      {\n        return { ...state,\n          contact: state.contacts.filter(el => el.id !== payload)\n        };\n      }\n\n    case SET_CONTACT:\n      return { ...state,\n        contact: payload\n      };\n\n    case GET_ALL_CONTACT_ERROR:\n    case SET_CONTACT_ERROR:\n      return { ...state,\n        error: payload,\n        contact: null,\n        loading: false\n      };\n\n    case GET_ALL_CONTACT:\n      return { ...state,\n        contacts: payload,\n        suggestContacts: payload,\n        loading: false\n      };\n\n    case REMOVE_CONTACT:\n      let con = [];\n      con = state.contacts.filter(el => el.id !== payload);\n      return { ...state,\n        contacts: con,\n        loading: false\n      };\n\n    case FILLTER_CONTACT:\n      return { ...state,\n        suggestContacts: payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/React/contract/contract/client/src/reducers/contactMangment.js"],"names":["GET_CONTACT","GET_ALL_CONTACT","REMOVE_CONTACT","FILLTER_CONTACT","SET_CONTACT","SET_CONTACT_ERROR","GET_ALL_CONTACT_ERROR","initialState","contact","suggestContacts","contacts","loading","error","state","action","type","payload","filter","el","id","con"],"mappings":"AAAA,SACEA,WADF,EAEEC,eAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,WALF,EAMEC,iBANF,EAOEC,qBAPF,QAQO,gBARP;AAUA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,IADU;AAEnBC,EAAAA,eAAe,EAAE,EAFE;AAGnBC,EAAAA,QAAQ,EAAE,EAHS;AAInBC,EAAAA,OAAO,EAAE,IAJU;AAKnBC,EAAAA,KAAK,EAAE;AALY,CAArB;AAQA,gBAAe,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAC/C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACE,SAAKf,WAAL;AAAkB;AAChB,eAAO,EACL,GAAGa,KADE;AAELL,UAAAA,OAAO,EAAEK,KAAK,CAACH,QAAN,CAAeO,MAAf,CAAsBC,EAAE,IAAIA,EAAE,CAACC,EAAH,KAAUH,OAAtC;AAFJ,SAAP;AAID;;AACD,SAAKZ,WAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELL,QAAAA,OAAO,EAAEQ;AAFJ,OAAP;;AAIF,SAAKV,qBAAL;AACA,SAAKD,iBAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELD,QAAAA,KAAK,EAAEI,OAFF;AAGLR,QAAAA,OAAO,EAAE,IAHJ;AAILG,QAAAA,OAAO,EAAE;AAJJ,OAAP;;AAMF,SAAKV,eAAL;AACE,aAAO,EACL,GAAGY,KADE;AAGLH,QAAAA,QAAQ,EAAEM,OAHL;AAILP,QAAAA,eAAe,EAAEO,OAJZ;AAMLL,QAAAA,OAAO,EAAE;AANJ,OAAP;;AAQF,SAAKT,cAAL;AACE,UAAIkB,GAAG,GAAG,EAAV;AAEAA,MAAAA,GAAG,GAAGP,KAAK,CAACH,QAAN,CAAeO,MAAf,CAAsBC,EAAE,IAAIA,EAAE,CAACC,EAAH,KAAUH,OAAtC,CAAN;AAEA,aAAO,EACL,GAAGH,KADE;AAELH,QAAAA,QAAQ,EAAEU,GAFL;AAGLT,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKR,eAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELJ,QAAAA,eAAe,EAAEO;AAFZ,OAAP;;AAKF;AACE,aAAOH,KAAP;AA9CJ;AAgDD,CAlDD","sourcesContent":["import {\r\n  GET_CONTACT,\r\n  GET_ALL_CONTACT,\r\n  REMOVE_CONTACT,\r\n  FILLTER_CONTACT,\r\n  SET_CONTACT,\r\n  SET_CONTACT_ERROR,\r\n  GET_ALL_CONTACT_ERROR\r\n} from '../action/type';\r\n\r\nconst initialState = {\r\n  contact: null,\r\n  suggestContacts: [],\r\n  contacts: [],\r\n  loading: true,\r\n  error: {}\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case GET_CONTACT: {\r\n      return {\r\n        ...state,\r\n        contact: state.contacts.filter(el => el.id !== payload)\r\n      };\r\n    }\r\n    case SET_CONTACT:\r\n      return {\r\n        ...state,\r\n        contact: payload\r\n      };\r\n    case GET_ALL_CONTACT_ERROR:\r\n    case SET_CONTACT_ERROR:\r\n      return {\r\n        ...state,\r\n        error: payload,\r\n        contact: null,\r\n        loading: false\r\n      };\r\n    case GET_ALL_CONTACT:\r\n      return {\r\n        ...state,\r\n\r\n        contacts: payload,\r\n        suggestContacts: payload,\r\n\r\n        loading: false\r\n      };\r\n    case REMOVE_CONTACT:\r\n      let con = [];\r\n\r\n      con = state.contacts.filter(el => el.id !== payload);\r\n\r\n      return {\r\n        ...state,\r\n        contacts: con,\r\n        loading: false\r\n      };\r\n    case FILLTER_CONTACT:\r\n      return {\r\n        ...state,\r\n        suggestContacts: payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}